@startuml
'https://plantuml.com/class-diagram

class JLisp
class Lexer
class Parser
class Interpreter
class ArithmeticFunctions
class functionHelper
class LogicFunctions
class Context
JLisp ..> Lexer
JLisp ..> Parser
JLisp ..> Interpreter

abstract class TreeNode
class Atom
class SExpression
class PrimitiveFunctions

class JLisp {
}

class Lexer {
    + getTokens( Stream ) : ArrayList<String>
    - streamToString (Stream) : String
    - prepare( Stream ) : String
    - divide (String) : ArrayList<String>
    - wrap (String) : String

}

class Parser {
    + buildTree ( ArrayList<String> ) : TreeNode
    + buildTree ( String ) : TreeNode
    + buildTree ( List<String> ) : TreeNode
}

class Interpreter {
    + evaluate (TreeNode) : String
}

class TreeNode <<Abstract>>{
    # tokens : ArrayList<String>
    + isList () : Boolean
    + evaluate() : TreeNode
    + toString() : String
    + create ( ArrayList<String> ) : TreeNode
    + create ( boolean ) : TreeNode
    + create ( int ) : TreeNode

}

class Atom {
    - value : String
    + toString() : String
    + isAtom() : Boolean
    + Atom() :  int
    + Atom() :  double




}

class SExpression {
    'Talvez los tokens no sen necesarios'
    # tokens : ArrayList<String>
    - childNodes : ArrayList<TreeNode>
    + toString() : String
    - isValid(String) : boolean
    - getNextClosedParentesis (int start)
}

class PrimitiveFunctions{
   + SUM( SExpression )
   + SUBTRACTION( SExpression )
   + DIVISION( SExpression )
   + MULTIPLICATION( SExpression )
   + CAR ( SExpression )
   + CDR ( SExpression )
   + SETQ ( SExpression )
   + COND ( SExpression )
   + QUOTE ( SExpression )
   + ATOM ( SExpression )
   + DEFUN ( SExpression )

}
class ArithmeticFunctions{
    + add(List<TreeNode>) : TreeNode
    + substraction(List<TreeNode>) : TreeNode
    + multiplication(List<TreeNode>) : TreeNode
    + division(List<TreeNode>) : TreeNode

}
class functionHelper{
    + isNodeType(TreeNode String) : boolean
    + getFirstMember(List<TreeNode>) : TreeNode
    + getRemainingMembers(List<TreeNode>) : (List<TreeNode>)
    + nodeAsNumeric (TreeNode) : double

}
class LogicFunctions {
    + not(List<TreeNode>) : TreeNode
    + eq(List<TreeNode>) : TreeNode
    + ne(List<TreeNode>) : TreeNode
    + lt(List<TreeNode>) : TreeNode
    + gt(List<TreeNode>) : TreeNode
    + ge(List<TreeNode>) : TreeNode
    + atom(List<TreeNode>) : TreeNode

}
class Context{
    -HashMap : Map<String TreeNode>
    -HashMap : Map<String userFunction>
    +functionExist (String) : boolean
    + variableExist (String) : boolean
    +getVariable(String) : TreeNode
    +getFunction (String) : userFunction

}

Parser "uses" ..> TreeNode
TreeNode <|-- "inherits" SExpression
TreeNode <|- "inherits" Atom
SExpression "contains" o-> Atom
SExpression ...> ArithmeticFunctions
SExpression ...> LogicFunctions
SExpression ...> PrimitiveFunctions
PrimitiveFunctions ..> functionHelper
LogicFunctions ..> functionHelper
ArithmeticFunctions ..> functionHelper
Parser "uses" ..> Context

@enduml