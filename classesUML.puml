@startuml
'https://plantuml.com/class-diagram

class Lisp
class Lexer
class Parser
class Interpreter

Lisp ..> Lexer
Lisp ..> Parser
Lisp ..> Interpreter

abstract class TreeNode
class Atom
class SExpression

class PrimitiveFunctions
class SymbolPatterns

Parser "uses" ..> TreeNode

TreeNode <|-- "inherits" Atom
TreeNode <|-- "inherits" SExpression
SExpression "contains" o--> Atom
 PrimitiveFunctions <- SExpression

class Lexer {
    + getTokens( Stream ) : ArrayList<String>
    - streamToString (Stream) : String
    - prepare( Stream ) : String
    - divide (String) : ArrayList<String>
}

class Parser {
    + buildTree ( ArrayList<String> ) : TreeNode
}

class Interpreter {
    + evaluate (TreeNode) : String
}

class TreeNode <<Abstract>>{
    # tokens : ArrayList<String>
    + isList () : Boolean
    + evaluate() : TreeNode
    + toString() : String
    + create ( ArrayList<String> ) : TreeNode
    + create ( boolean ) : TreeNode
    + create ( int ) : TreeNode

}

class Atom {
    - value : String
    + toString() : String
}

class SExpression {
    'Talvez los tokens no sen necesarios'
    # tokens : ArrayList<String>
    - childNodes : ArrayList<TreeNode>
    + toString() : String
    - isValid(String) : boolean
    - getNextClosedParentesis (int start)
}

class PrimitiveFunctions{
   + SUM( SExpression )
   + SUBTRACTION( SExpression )
   + DIVISION( SExpression )
   + MULTIPLICATION( SExpression )
   + CAR ( SExpression )
   + CDR ( SExpression )
   + SETQ ( SExpression )
   + COND ( SExpression )
   + QUOTE ( SExpression )
   + ATOM ( SExpression )
   + DEFUN ( SExpression )

}
@enduml